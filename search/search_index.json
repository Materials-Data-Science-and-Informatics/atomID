{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"atomID","text":"<p>Welcome to the <code>atomID</code> package! This README will guide you through the initial steps required to start using the <code>AnnotateCrystal</code> class for annotating crystal structures and defects. Follow the steps outlined below to get started.</p>"},{"location":"#overview","title":"Overview","text":"<p>\"AtomID\" is an open-source Python package designed to annotate crystal structure data, enhancing data standardisation and interoperability in the field of computational materials science.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-format Data Input: Supports data import from multiple commonly used formats, such as CIF, POSCAR, and LAMMPS, ensuring compatibility across various modelling tools and workflows.</li> <li>Crystal Structure Identification: Utilises Common Neighbour Analysis to accurately identify crystal structures within different lattices.</li> <li>Defect Detection and Characterisation: Applies Wigner-Seitz analysis to detect and categorise various types of lattice defects.</li> <li>Defect Concentration Calculation: Computes the concentration of different point defects.</li> <li>Knowledge Graph Creation: Generates a knowledge graph for crystal structures using the Computational Material Sample Ontology (CMSO), which can be exported and stored in Turtle (TTL) format, enabling sharing and complex querying on the data.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To begin, you need to install the <code>atomID</code> package. This can be done using pip:</p> <pre><code>pip install atomid\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>This section provides a step-by-step guide on how to utilise the <code>AnnotateCrystal</code> class within the <code>atomID</code> package.</p>"},{"location":"#1-import-the-required-class","title":"1. Import the Required Class","text":"<p>Start by importing the <code>AnnotateCrystal</code> class from the <code>atomid.annotate</code> module:</p> <pre><code>from atomid.annotate import AnnotateCrystal\n</code></pre>"},{"location":"#2-create-an-instance-of-annotatecrystal","title":"2. Create an Instance of <code>AnnotateCrystal</code>","text":"<p>Next, create an instance of the <code>AnnotateCrystal</code> class:</p> <pre><code>crystal = AnnotateCrystal()\n</code></pre>"},{"location":"#3-read-the-crystal-structure-file","title":"3. Read the Crystal Structure File","text":"<p>Read the crystal structure file by using the <code>read_crystal_structure_file</code> method. Make sure to replace <code>crystal_data_file_path</code> with the actual path to your crystal structure file:</p> <pre><code>crystal.read_crystal_structure_file(crystal_data_file_path, \"vasp\")\n</code></pre>"},{"location":"#4-annotate-the-crystal-structure","title":"4. Annotate the Crystal Structure","text":"<p>You can now annotate the crystal structure with the <code>annotate_crystal_structure</code> method:</p> <pre><code>crystal.annotate_crystal_structure()\n</code></pre>"},{"location":"#5-annotate-defects","title":"5. Annotate Defects","text":"<p>To annotate defects, provide a reference file path. Replace <code>ref_file_path</code> with the actual path to your reference file:</p> <pre><code>crystal.annotate_defects(ref_file_path, \"vasp\")\n</code></pre>"},{"location":"#6-write-to-file","title":"6. Write to File","text":"<p>Finally, write the annotated data to a file using the <code>write_to_file</code> method. Specify the output file name and format:</p> <pre><code>crystal.write_to_file(output_file_path, \"ttl\")\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Here is a complete example that combines all the steps:</p> <pre><code>from atomid.annotate import AnnotateCrystal\n\n# Create an instance of AnnotateCrystal\ncrystal = AnnotateCrystal()\n\n# Read the crystal structure file\ncrystal.read_crystal_structure_file(\"path/to/your/interstitial_file.poscar\", \"vasp\")\n\n# Annotate the crystal structure\ncrystal.annotate_crystal_structure()\n\n# Annotate defects using a reference file\ncrystal.annotate_defects(\"path/to/your/reference_file.poscar\", \"vasp\")\n\n# Write the annotated data to a file\ncrystal.write_to_file(\"Al_inter.ttl\", \"ttl\")\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Detailed documentation for the <code>atomID</code> package can be found in the docs folder.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Please refer to the CONTRIBUTING GUIDE on contributing to the <code>atomID</code> package.</p>"},{"location":"#contact","title":"Contact","text":"<p>For any queries or feedback, kindly create an issue on the GitHub repository.</p>"},{"location":"#usage_1","title":"Usage","text":"<p>To get started, please check out the quickstart guide.</p>"},{"location":"change_log/","title":"Changelog","text":"<p>Most important changes in each released version.</p>"},{"location":"change_log/#v0311","title":"v0.3.11","text":"<ul> <li>Add options to manually set point defect concetration and number.</li> </ul>"},{"location":"change_log/#v0310","title":"v0.3.10","text":"<ul> <li>Add option to manually set crystal structure parameters (lattice constant and crytal type).</li> </ul>"},{"location":"change_log/#v039","title":"v0.3.9","text":"<ul> <li>Add Dislocation identification and Grain identification.</li> </ul>"},{"location":"change_log/#v038","title":"v0.3.8","text":"<ul> <li>Add tests for atomid package.</li> </ul>"},{"location":"change_log/#v037","title":"v0.3.7","text":"<ul> <li>Add documentation and set up mkdocs.</li> </ul>"},{"location":"change_log/#v036","title":"v0.3.6","text":"<ul> <li>Add polyhedral template matching for structure analysis.</li> </ul>"},{"location":"change_log/#v035","title":"v0.3.5","text":"<ul> <li>Remove atomid.py file. Functionality is now in <code>atomid.annotate</code> module.</li> </ul>"},{"location":"change_log/#v034","title":"v0.3.4","text":"<ul> <li>Added a feature to use KDTree for point defect detection. This feature is faster than the previous brute force implementation.</li> </ul>"},{"location":"change_log/#v033","title":"v0.3.3","text":"<ul> <li>Added a feature to use approximate nearest neighbors search for point defect detection.</li> </ul>"},{"location":"contributing/","title":"How To Contribute","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Materials-Data-Science-and-Informatics/atomid/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in     troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \\\"bug\\\" and \\\"help wanted\\\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \\\"enhancement\\\" and \\\"help wanted\\\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>atomID could always use more documentation, whether as part of the official atomID docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Materials-Data-Science-and-Informatics/atomid/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to     implement.</li> <li>Remember that this is a volunteer-driven project, and that     contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\\'s how to set up [atomid]{.title-ref} for local development.</p> <ol> <li> <p>Fork the [atomid]{.title-ref} repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/atomid.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv atomid\n$ cd atomid/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you\\'re done making changes, check that your changes pass     flake8 and the tests, including testing other Python versions with     tox:</p> <pre><code>$ make lint\n$ make test\nOr\n$ make test-all\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests:</p> <pre><code>$ python -m unittest tests.test_atomid\n</code></pre>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run:</p> <pre><code>$ bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>Travis will then deploy to PyPI if tests pass.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#development-lead","title":"Development Lead","text":"<ul> <li>Ninad Bhat bhat.ninadmb@gmail.com</li> </ul>"},{"location":"credits/#contributors","title":"Contributors","text":"<p>None yet. Why not be the first?</p>"},{"location":"credits/#others","title":"Others","text":"<p>The documentation of this project was created with the help of Cookiecutter, fair-python-cookiecutter, and the audreyr/cookiecutter-pypackage  project template.</p>"},{"location":"quickstart/","title":"atomID Quickstart Guide","text":"<p>Welcome to the atomID package quickstart guide! This guide will help you get started with using the <code>AnnotateCrystal</code> class for annotating crystal structures and defects. Follow the steps below to begin.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, ensure you have the <code>atomID</code> package installed. You can install it via pip:</p> <pre><code>pip install atomid\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":"<p>Here's a step-by-step guide on how to use the <code>AnnotateCrystal</code> class in the atomID package.</p>"},{"location":"quickstart/#1-import-the-required-class","title":"1. Import the Required Class","text":"<p>Begin by importing the <code>AnnotateCrystal</code> class from the <code>atomid.annotate</code> module.</p> <pre><code>from atomid.annotate import AnnotateCrystal\n</code></pre>"},{"location":"quickstart/#2-create-an-instance-of-annotatecrystal","title":"2. Create an Instance of <code>AnnotateCrystal</code>","text":"<p>Create an instance of the <code>AnnotateCrystal</code> class.</p> <pre><code>crystal = AnnotateCrystal()\n</code></pre>"},{"location":"quickstart/#3-read-the-crystal-structure-file","title":"3. Read the Crystal Structure File","text":"<p>Use the <code>read_crystal_structure_file</code> method to read the crystal structure file. Replace <code>crystal_data_file_path</code> with the path to your crystal structure file.</p> <pre><code>crystal.read_crystal_structure_file(crystal_data_file_path, \"vasp\")\n</code></pre>"},{"location":"quickstart/#4-annotate-the-crystal-structure","title":"4. Annotate the Crystal Structure","text":"<p>Annotate the crystal structure using the <code>annotate_crystal_structure</code> method.</p> <pre><code>crystal.annotate_crystal_structure()\n</code></pre>"},{"location":"quickstart/#5-annotate-defects","title":"5. Annotate Defects","text":"<p>Annotate defects by providing a reference file path. Replace <code>ref_file_path</code> with the path to your reference file.</p> <pre><code>crystal.annotate_defects(ref_file_path, \"vasp\")\n</code></pre>"},{"location":"quickstart/#6-write-to-file","title":"6. Write to File","text":"<p>Finally, write the annotated data to a file using the <code>write_to_file</code> method. Specify the output file name and format.</p> <pre><code>crystal.write_to_file(output_file_path, \"ttl\")\n</code></pre>"},{"location":"quickstart/#example","title":"Example","text":"<p>Below is a complete example putting all the steps together:</p> <pre><code>from atomid.annotate import AnnotateCrystal\n\n# Create an instance of AnnotateCrystal\ncrystal = AnnotateCrystal()\n\n# Read the crystal structure file\ncrystal.read_crystal_structure_file(\"path/to/your/interstitial_file.poscar\", \"vasp\")\n\n# Annotate the crystal structure\ncrystal.annotate_crystal_structure()\n\n# Annotate defects using a reference file\ncrystal.annotate_defects(\"path/to/your/reference_file.poscar\", \"vasp\")\n\n# Write the annotated data to a file\ncrystal.write_to_file(\"Al_inter.ttl\", \"ttl\")\n</code></pre> <p>With these steps, you should be able to start annotating your crystal structures and defects using the atomID package. For more detailed information and advanced usage, please refer to the official documentation.</p>"}]}