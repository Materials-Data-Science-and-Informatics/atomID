name: Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install poe, pre-commit and safety
        run: pip install poethepoet pre-commit safety pytest
      - name: Check that all static analysis tools run without errors
        run: pytest --cov src/atomid --cov-report term-missing --cov-fail-under=95

      # Following not used currently
      # - name: Build coverage file
      #   run: |
      #     poetry run pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=src/atomid tests/ | tee pytest-coverage.txt
      # - name: Pytest coverage comment
      #   uses: MishaKav/pytest-coverage-comment@main
      #   with:
      #     pytest-coverage-path: ./pytest-coverage.txt
      #     junitxml-path: ./pytest.xml

      # - name: Check the output coverage
      #   run: |
      #     echo "Coverage Percentage - ${{ steps.coverageComment.outputs.coverage }}"
      #     echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
      #     echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"

      #     echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"

      #     echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
      #     echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
      #     echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
      #     echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
      #     echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"

      #     echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"

