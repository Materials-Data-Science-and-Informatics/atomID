name: CI
# Main CI pipeline of the repository.
#
# Overview:
# Lint --> test doc build -\
#      \-> test code      ---> deploy docs (*) -> release (**)
#
#  (*): only on push of primary branches + release tags
# (**): only for release version tags (vX.Y.Z)

on:
  push:
    branches: [main, dev]
    tags: ["v*.*.*"]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  lint:
    # run general checks that do not require installing the package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install poe, pre-commit and safety
        run: pip install poethepoet pre-commit safety

      # NOTE: using custom cache, to include pre-commit linters + deps
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pre-commit
            ~/.cache/pip
          key: ${{ hashFiles('.pre-commit-config.yaml') }}-pre-commit

      - name: Check that all static analysis tools run without errors
        run: poetry run poe lint --all-files

      - name: Scan dependencies for known vulnerabilities
        run: safety check -r pyproject.toml

  test:
    # run tests with different OS and Python combinations
    needs: lint
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        python-version: ["3.10"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - if: runner.os == 'Linux'
        run:  |
          sudo apt update && sudo apt install -y libegl1-mesa-dev
      - name: Check that tests complete without errors
        run: |
          poetry install
          poetry run poe test

  coverage:
      runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build coverage file
        run: |
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=src/atomid tests/ | tee pytest-coverage.txt

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

      - name: Check the output coverage
        run: |
          echo "Coverage Percentage - ${{ steps.coverageComment.outputs.coverage }}"
          echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
          echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"

          echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"

          echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
          echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
          echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
          echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
          echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"

          echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"