[tool.poetry]
name = "atomID"
version = "0.3.6"
description = "Python package to identify and annotate crystal structure data files"
authors = ["Ninad Bhat"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"
pyscal3 = "^3.1.9"
rdflib = "^7.0.0"
atomrdf = {git = "https://github.com/pyscal/atomRDF.git"}
annoy = "^1.17.3"
scikit-learn = "^1.4.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.5"
pre-commit = "^3.7.0"
mypy = "^1.9.0"
poethepoet = "^0.25.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# NOTE: You can run the following with "poetry poe TASK"
[tool.poe.tasks]
init-dev = { shell = "pre-commit install" }
lint = "pre-commit run"  # pass --all-files to check everything
docs = "mkdocs build"  # run this to generate local documentation


[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88
indent-width = 4


[tool.ruff.lint]
extend-select = ["B", "D", "I", "S"]
ignore = ["D203", "D213", "D407", "B008", "S101", "D102", "D103"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"

indent-style = "space"

skip-magic-trailing-comma = false

line-ending = "auto"


docstring-code-format = true

docstring-code-line-length = 80

[tool.ruff.lint.pydocstyle]
convention = "numpy"

